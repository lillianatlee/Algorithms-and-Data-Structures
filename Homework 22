/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package knight.stour;

import java.util.PriorityQueue;
import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.layout.Pane;
import javafx.scene.layout.StackPane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Line;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;

/**
 *
 * @author lillianlinden
 */
public class KnightSTour extends Application {
    
    static boolean[][] hasBeen = new boolean[8][8];
    static Pane root = new Pane();
    int XXX, YYY;
    
    @Override
    public void start(Stage primaryStage) {
        
        for (int i = 0; i < 9; i++) {
            Line l1 = new Line(i * 40, 0, i * 40, 320);
            Line l2 = new Line(0, i * 40, 320, i * 40);
            root.getChildren().addAll(l1, l2);
        }
        Button b = new Button("Solve");
        b.setLayoutX(135);
        b.setLayoutY(330);
        root.getChildren().add(b);
        
        Scene scene = new Scene(root, 320, 360);
        
        primaryStage.setTitle("Knight's Path");
        primaryStage.setScene(scene);
        primaryStage.show();
        
        root.setOnMouseClicked(e -> {
            int X = (int)(e.getX() / 40);
            int Y = (int)(e.getY() / 40);
            XXX = X;
            YYY = Y;
            hasBeen[X][Y] = true;
            Rectangle r = new Rectangle();
            r.setX(X * 40);
            r.setY(Y * 40);
            r.setWidth(40);
            r.setHeight(40);
            r.setFill(Color.BLUEVIOLET);
            root.getChildren().add(r);
            
        });
        
        b.setOnAction(e -> {
            solve(XXX, YYY);
        });
        
       
        
    }
    
    static boolean solve(int x, int y) {
        int[][] priority =  {{2, 3, 4, 4, 4, 4, 3, 2}, 
                             {3, 4, 6, 6, 6, 6, 4, 3}, 
                             {4, 6, 8, 8, 8, 8, 6, 4}, 
                             {4, 6, 8, 8, 8, 8, 6, 4}, 
                             {4, 6, 8, 8, 8, 8, 6, 4}, 
                             {4, 6, 8, 8, 8, 8, 6, 4}, 
                             {3, 4, 6, 6, 6, 6, 4, 3}, 
                             {2, 3, 4, 4, 4, 4, 3, 2}};
        hasBeen[x][y] = true;
        boolean found = true;
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                if (!hasBeen[i][j]) found = false;
            }
        }
        if (found) return true;
        PriorityQueue<Space> pq = new PriorityQueue<>();
        int[] X = {1, 1, 2, 2, -1, -1, -2, -2};
        int[] Y = {2, -2, 1, -1, 2, -2, 1, -1};
        for (int i = 0; i < 8; i++) {
            int newX = x + X[i];
            int newY = y + Y[i];
            if (newX >= 0 && newX < 8 && newY >= 0 && newY < 8 && !hasBeen[newX][newY]) {
                pq.offer(new Space(newX, newY, priority[newX][newY]));
                
            }
        }
        while(!pq.isEmpty()) {
            Space s = pq.poll();
            Line l = new Line();
            l.setStartX(x * 40 + 20);
            l.setStartY(y * 40 + 20);
            l.setEndX(s.x * 40 + 20);
            l.setEndY(s.y * 40 + 20);
            root.getChildren().add(l);
            if (solve(s.x, s.y)) {
                return true;
            }
            root.getChildren().remove(root.getChildren().size() - 1);
        }
        hasBeen[x][y] = false;
        return false;
    }
    
    static class Space implements Comparable<Space> {
        int x, y;
        int pri;
        
        public Space(int x, int y, int priority) {
            this.x = x;
            this.y = y;
            this.pri = priority;
        }
        
        @Override
        public int compareTo(Space other) {
            return pri - other.pri;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        launch(args);
    }
    
}
