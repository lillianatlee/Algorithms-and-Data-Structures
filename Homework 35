import java.io.Serializable;

public class HuffmanTree implements Comparable <HuffmanTree>, Serializable {
	private static final long serialVersionUID = 123L;
	HuffmanTreeNode root;
	
	HuffmanTree(HuffmanTree t1, HuffmanTree t2) {
		root = new HuffmanTreeNode();
		root.left = t1.root;
		root.right = t2.root;
		root.freq = t1.root.freq + t2.root.freq;
	}
	
	HuffmanTree(char ch, int freq) {
		root = new HuffmanTreeNode(ch, freq);
	}

	@Override
	public int compareTo(HuffmanTree o) {
		return root.freq - o.root.freq;
	}
	
	static String decode(HuffmanTree huffTree, String code) {
		String toReturn = "";
		HuffmanTreeNode curr = huffTree.root;
		for (int i = 0; i < code.length(); i++) {
			curr = code.charAt(i) == '1' ? curr.right : curr.left;
			if (curr.left == null && curr.right == null) {
				toReturn += curr.ch;
				curr = huffTree.root;
			}
		}
		return toReturn;
	}
	
	static class HuffmanTreeNode implements Serializable {
		private static final long serialVersionUID = 1234L;
		char ch;
		int freq;
		HuffmanTreeNode left, right;
		
		HuffmanTreeNode() {}
		HuffmanTreeNode(char c, int f) {
			ch = c;
			freq = f;
		}
	}
}
