import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

	public class KnightBFS {

		static int[][] a = {	{-1, -1, -1, -1, -1, -1, -1, -1}, 
							{-1, -1, -1, -1, -1, -1, -1, -1},
							{-1, -1, -1, -1, -1, -1, -1, -1},
							{-1, -1, -1, -1, -1, -1, -1, -1},
							{-1, -1, -1, -1, -1, -1, -1, -1},
							{-1, -1, -1, -1, -1, -1, -1, -1}, 
							{-1, -1, -1, -1, -1, -1, -1, -1}, 
							{-1, -1, -1, -1, -1, -1, -1, -1}};
		
		static ArrayList<Cell> p = new ArrayList<Cell>();

		public static void main(String[] args) {
			
			Scanner input = new Scanner(System.in);
			System.out.print("Starting Point: ");
			int ar = input.nextInt(), b = input.nextInt();
			Cell start = new Cell(ar, b);
			System.out.print("Ending Point: ");
			int c = input.nextInt(), d = input.nextInt();
			Cell end = new Cell(c, d);
			int count = bfs(start, end);

			path(start, end, count);
			
			for (int i = 0; i < a.length; i++) {
				for (int j = 0; j < a[0].length; j++) {
					boolean yeah = false;
					for (int k = 0; k < p.size(); k++) {
						if (p.get(k).row == i && p.get(k).column == j) yeah = true;
					}
					if (!yeah) {
						System.out.print("X ");
					} else {
						System.out.print(a[i][j] + " ");
					}
				}
				System.out.println();
			}
		}

		static int bfs (Cell start, Cell end) {
			Queue<Cell> queue = new LinkedList<>();
			a[start.row][start.column] = 0;
			queue.offer(start);
			int counter = 0;
			while (!queue.isEmpty()) {
				counter++;
				Cell from = queue.poll();
				//up 2 left 1
				if (from.row > 1 && from.column > 0 && a[from.row - 2][from.column - 1] == -1) {
					a[from.row - 2][from.column - 1] = a[from.row][from.column] + 1;
					queue.offer(new Cell(from.row - 2, from.column - 1));
				}
				//up 2 right 1
				if (from.row > 1 && from.column < a[0].length - 1 && a[from.row - 2][from.column + 1] == -1) {
					a[from.row - 2][from.column + 1] = a[from.row][from.column] + 1;
					queue.offer(new Cell(from.row - 2, from.column + 1));
				}
				//right 2 up 1
				if (from.column < a[0].length - 2 && from.row > 0 && a[from.row - 1][from.column + 2] == -1) {
					a[from.row - 1][from.column + 2] = a[from.row][from.column] + 1;
					queue.offer(new Cell(from.row - 1, from.column + 2));
				}
				//right 2 down 1
				if (from.column < a[0].length - 2 && from.row < a.length - 1 && a[from.row + 1][from.column + 2] == -1) {
					a[from.row + 1][from.column + 2] = a[from.row][from.column] + 1;
					queue.offer(new Cell(from.row + 1, from.column + 2));
				}
				//down 2 left 1
				if (from.row < a.length - 2 && from.column > 0 && a[from.row + 2][from.column - 1] == -1) {
					a[from.row + 2][from.column - 1] = a[from.row][from.column] + 1;
					queue.offer(new Cell(from.row + 2, from.column - 1));
				}
				//down 2 right 1
				if (from.row < a.length - 2 && from.column < a[0].length - 1 && a[from.row + 2][from.column + 1] == -1) {
					a[from.row + 2][from.column + 1] = a[from.row][from.column] + 1;
					queue.offer(new Cell(from.row + 2, from.column + 1));
				}
				//left 2 up 1
				if (from.column > 1 && from.row > 0 && a[from.row - 1][from.column - 2] == -1) {
					a[from.row - 1][from.column - 2] = a[from.row][from.column] + 1;
					queue.offer(new Cell(from.row - 1, from.column - 2));
				}
				//left 2 down 1
				if (from.column > 1 && from.row < a.length - 1 && a[from.row + 1][from.column - 2] == -1) {
					a[from.row + 1][from.column - 2] = a[from.row][from.column] + 1;
					queue.offer(new Cell(from.row + 1, from.column - 2));
				}
			}
			return counter;
		}

		static void path(Cell start, Cell end, int count) {
			System.out.print("Path: ");
			Cell current = new Cell(end.row, end.column);
			while(!(current.row == start.row && current.column == start.column)) {
				p.add(current);
				if (current.row > 1 && current.column > 0 && a[current.row - 2][current.column - 1] == a[current.row][current.column] - 1) {
					current = new Cell(current.row - 2, current.column - 1);
				}
				else if (current.row > 1 && current.column < a[0].length - 1 && a[current.row - 2][current.column + 1] == a[current.row][current.column] - 1) {
					current = new Cell(current.row - 2, current.column + 1);
				}
				else if (current.column < a[0].length - 2 && current.row > 0 && a[current.row - 1][current.column + 2] == a[current.row][current.column] - 1) {
					current = new Cell(current.row - 1, current.column + 2);
				}
				else if (current.column < a[0].length - 2 && current.row < a.length - 1 && a[current.row + 1][current.column + 2] == a[current.row][current.column] - 1) {
					current = new Cell(current.row + 1, current.column + 2);
				}
				else if (current.row < a.length - 2 && current.column > 0 && a[current.row + 2][current.column - 1] == a[current.row][current.column] - 1) {
					current = new Cell(current.row + 2, current.column - 1);
				}
				else if (current.row < a.length - 2 && current.column < a[0].length - 1 && a[current.row + 2][current.column + 1] == a[current.row][current.column] - 1) {
					current = new Cell(current.row + 2, current.column + 1);
				}
				else if (current.column > 1 && current.row > 0 && a[current.row - 1][current.column - 2] == a[current.row][current.column] - 1) {
					current = new Cell(current.row - 1, current.column - 2);
				}
				else if (current.column > 1 && current.row < a.length - 1 && a[current.row + 1][current.column - 2] == a[current.row][current.column] - 1) {
					current = new Cell(current.row + 1, current.column - 2);
				}
			}
			p.add(start);
			for (int i = p.size() - 1; i > 0; i--) {
				System.out.print(p.get(i) + " --> ");
			}
			System.out.println(p.get(0));
		}
		
		static class Cell {
			int row, column;
			Cell(int row, int column) {
				this.row = row;
				this.column = column;
			}

			public String toString() {
				return("(" + row + ", " + column + ")");
			}
		}


}
