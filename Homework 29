/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package animatedfloodfill;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;

/**
 *
 * @author lillianlinden
 */
public class AnimatedFloodFill extends Application {
    int N, M, size = 100;
    int[][] maze;
    StackPane[][] pane;
    int[][] solution;
    String borderColor = "-fx-border-color: black; ";
    String fillColor = "-fx-background-color: red; ";
    String pathColor = "-fx-background-color: blue; ";
    String borderWidth = "-fx-border-width: ";
    
    @Override
    public void start(Stage primaryStage) throws FileNotFoundException, IOException {
        BufferedReader in = new BufferedReader(new FileReader("maze.txt"));
        StringTokenizer st = new StringTokenizer(in.readLine());
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        maze = new int[N][M];
        pane = new StackPane[N][M];
        solution = new int[N][M];
        GridPane root = new GridPane();
        for (int i = 0; i < N; i++) {
            st = new StringTokenizer(in.readLine());
            for (int j = 0; j < M; j++) {
                solution[i][j] = -1;
                maze[i][j] = Integer.parseInt(st.nextToken());
                pane[i][j] = new StackPane();
                pane[i][j].setPrefSize(size, size);
                String adding = "";
                adding += ((maze[i][j] & 8) == 8) ? "1 " : "0 ";
                adding += ((maze[i][j] & 4) == 4) ? "1 " : "0 ";
                adding += ((maze[i][j] & 2) == 2) ? "1 " : "0 ";
                adding += ((maze[i][j] & 1) == 1) ? "1;" : "0;";
                pane[i][j].setStyle(borderColor + borderWidth + adding);
                root.add(pane[i][j], j, i);
            }
        }
        
        
        Scene scene = new Scene(root);
        
        primaryStage.setTitle("Team 1661 The Griffitrons");
        primaryStage.setScene(scene);
        primaryStage.show();
        primaryStage.setOnCloseRequest(e -> {
            System.exit(0);
            Platform.exit();
        });
        
        new Thread(() -> {
            try {
                Cell startCell = new Cell(0, 0);
                Cell endCell = new Cell(6, 12);
                fill(startCell);
                showPath(endCell);
            } catch (InterruptedException ex) {
                Logger.getLogger(AnimatedFloodFill.class.getName()).log(Level.SEVERE, null, ex);
            }
        }).start();
    }
    
    void showPath(Cell to) throws InterruptedException {
        int[] di = {-1, 0, 1, 0};
        int[] dj = {0, 1, 0, -1};
        int[] bin = {8, 4, 2, 1};
        while (solution[to.i][to.j] != 0) {
            pane[to.i][to.j].setStyle(pane[to.i][to.j].getStyle() + pathColor);
            Thread.sleep(200);
            for (int dir = 0; dir < 4; dir++) {
                if ((maze[to.i][to.j] & bin[dir]) != bin[dir] &&
                        to.i + di[dir] < N && to.j + dj[dir] < M && 
                        solution[to.i + di[dir]][to.j + dj[dir]] == (solution[to.i][to.j] - 1)) {
                    to.i = to.i + di[dir];
                    to.j = to.j + dj[dir];
                    pane[to.i][to.j].setStyle(pane[to.i][to.j].getStyle() + pathColor);
                }
            }
            pane[to.i][to.j].setStyle(pane[to.i][to.j].getStyle() + pathColor);
        }
        pane[to.i][to.j].setStyle(pane[to.i][to.j].getStyle() + pathColor);
        
    }
    
    void fill(Cell startCell) throws InterruptedException {
        int[] di = {-1, 0, 1, 0};
        int[] dj = {0, 1, 0, -1};
        int[] bin = {8, 4, 2, 1};
        
        Queue<Cell> queue = new LinkedList<>();
        solution[startCell.i][startCell.j] = 0;
        queue.add(startCell);
        
        while (!queue.isEmpty()) {
            Cell from = queue.poll();
            pane[from.i][from.j].setStyle(pane[from.i][from.j].getStyle() + fillColor);
            Thread.sleep(200);
            for (int dir = 0; dir < 4; dir++) {
                if ((maze[from.i][from.j] & bin[dir]) != bin[dir] && 
                        solution[from.i + di[dir]][from.j + dj[dir]] == -1) {
                    solution[from.i + di[dir]][from.j + dj[dir]] = solution[from.i][from.j] + 1;
                    queue.offer(new Cell(from.i + di[dir], from.j + dj[dir]));
                }
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        launch(args);
    }
    
}

class Cell {
    int i, j;
    Cell (int i, int j) {
        this.i = i;
        this.j= j;
    }
}

//7 13
//13 9 8 8 8 8 8 8 8 8 8 8 12
//1 0 0 0 0 0 0 0 4 5 1 0 4
//5 1 0 2 4 5 1 4 5 1 0 0 6
//5 1 0 8 4 5 1 4 5 1 0 0 12
//5 3 0 0 4 5 1 4 5 1 0 0 4
//7 9 4 1 4 5 1 0 0 4 5 1 4
//11 2 6 3 2 2 2 2 2 2 2 2 6
