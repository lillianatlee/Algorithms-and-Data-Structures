/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package recursivelines;

import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TextField;
import javafx.scene.layout.Pane;
import javafx.scene.layout.StackPane;
import javafx.scene.shape.Line;
import javafx.stage.Stage;

/**
 *
 * @author lillianlinden
 */
public class RecursiveLines extends Application {
    Pane root = new Pane();
    Line line = new Line(122, 250, 378, 250);
    TextField tf = new TextField("Enter a number");
    Button b = new Button("Go!");
    @Override
    public void start(Stage primaryStage) {
        tf.setLayoutX(100);
        tf.setLayoutY(460);
        b.setLayoutX(300);
        b.setLayoutY(460);
        
        root.getChildren().addAll(line, tf, b);
        
        Scene scene = new Scene(root, 500, 500);
        
        primaryStage.setTitle("Fractals");
        primaryStage.setScene(scene);
        primaryStage.show();
        
        b.setOnAction(e -> {
            int depth = Integer.parseInt(tf.getText()) - 1;
            System.out.println(depth);
            root.getChildren().clear();
            root.getChildren().addAll(line, tf, b);
            recurse(line, depth);
        });
    }
    
    void recurse(Line line, int depth) {
        if (depth == 0) return;
        if (line.getStartX() == line.getEndX()) {
            //is vertical --> write horizontal
            Line line1 = new Line();
            line1.setStartX(line.getStartX() - Math.abs(line.getStartY() - line.getEndY()) / 4);
            line1.setEndX(line.getStartX() + Math.abs(line.getStartY() - line.getEndY()) / 4);
            line1.setStartY(line.getStartY());
            line1.setEndY(line.getStartY());
            
            Line line2 = new Line();
            line2.setStartX(line.getEndX() - Math.abs(line.getStartY() - line.getEndY()) / 4);
            line2.setEndX(line.getEndX() + Math.abs(line.getStartY() - line.getEndY()) / 4);
            line2.setStartY(line.getEndY());
            line2.setEndY(line.getEndY());
            
            root.getChildren().addAll(line1, line2);
            
            recurse(line1, depth - 1);
            recurse(line2, depth - 1);
            
        } else {
            //is horizontal --> write vertical
            Line line1 = new Line();
            line1.setStartX(line.getStartX());
            line1.setEndX(line.getStartX());
            line1.setStartY(line.getStartY() - Math.abs(line.getStartX() - line.getEndX()) / 4);
            line1.setEndY(line.getStartY() + Math.abs(line.getStartX() - line.getEndX()) / 4);
            
            Line line2 = new Line();
            line2.setStartX(line.getEndX());
            line2.setEndX(line.getEndX());
            line2.setStartY(line.getEndY() - Math.abs(line.getStartX() - line.getEndX()) / 4);
            line2.setEndY(line.getEndY() + Math.abs(line.getStartX() - line.getEndX()) / 4);
            
            root.getChildren().addAll(line1, line2);
            
            recurse(line1, depth - 1);
            recurse(line2, depth - 1);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        launch(args);
    }
    
}
