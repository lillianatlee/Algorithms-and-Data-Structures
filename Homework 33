import java.util.Arrays;
import java.util.PriorityQueue;

public class minHeap<E extends Comparable<E>> {

	public static void main(String[] args) {
		minHeap<Integer> heap = new minHeap<>();
		PriorityQueue<Integer> pq = new PriorityQueue<>();
		for (int i = 0; i < 10; i++) {
			int x = (int)(Math.random() * 50);
			heap.add(x);
			pq.offer(x);
		}
		
		System.out.println(pq);
		for (Comparable x : heap.data) System.out.print(x + "  ");
	}
	
	private int size = 0, capacity = 10;
	private E[] data = (E[])new Comparable[capacity];
	
	private void ensureCapacity() {
		if (size == capacity) {
			capacity *= 2;
			data = Arrays.copyOf(data, capacity);
		}
	}
	
	private int leftChildIndex(int index) {
		return 2 * index + 1;
	}
	private int rightChildIndex(int index) {
		return 2 * index + 2; 
	}
	private int parentIndex(int index) {
		return (index - 1) / 2;
	}
	private boolean hasLeftChild(int index) {
		return leftChildIndex(index) < size;
	}
	private boolean hasRightChild(int index) {
		return rightChildIndex(index) < size;
	}
	private boolean hasParent(int index) {
		return index > 0;
	}
	private E leftChild(int index) {
		return data[leftChildIndex(index)];
	}
	private E rightChild(int index) {
		return data[rightChildIndex(index)];
	}
	private E parent(int index) {
		return data[parentIndex(index)];
	}
	
	public E peek() {
		if (size == 0) return null;
		return data[0];
	}
	public void add(E x) {
		ensureCapacity();
		data[size++] = x;
		percolateUp();
	}
	public E poll() {
		if (size == 0) return null;
		E tmp = data[0];
		data[0] = data[--size];
		percolateDown();
		return tmp;
	}
	private void percolateUp() {
		//bubble up, shift up, trickle up, heapify up, cascade up
		int index = size - 1;
		while (hasParent(index) && parent(index).compareTo(data[index]) > 0) {
			E tmp = parent(index);
			data[parentIndex(index)] = data[index];
			data[index] = tmp;
			index = parentIndex(index);
		}
	}
	private void percolateDown() {
		int index = 0;
		while (hasLeftChild(index)) {
			int smallerChildIndex = leftChildIndex(index);
			if (hasRightChild(index)) {
				if(rightChild(index).compareTo(leftChild(index)) < 0) {
					smallerChildIndex = rightChildIndex(index);
				}
			}
			if (data[index].compareTo(data[smallerChildIndex]) < 0) break;
			E tmp = data[index];
			data[index] = data[smallerChildIndex];
			data[smallerChildIndex] = tmp;
			index = smallerChildIndex;
		}
	}
	public boolean delete(E x) {
		int index = -1;
		for (int i = 0; i < data.length; i++) {
			if (x.equals(data[i])) {
				index = i;
			}
		}
		if (index != -1) {
			data[index] = data[--size];
			percolateDown();
			return true;
		}
		return false;
	}
	

}
