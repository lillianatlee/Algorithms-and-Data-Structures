/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sortssortssorts;

import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;

/**
 *
 * @author lillianlinden
 */
public class SortsSortsSorts extends Application {
    final int SIZE = 50;
    Rectangle[] rec1 = new Rectangle[SIZE];
    Rectangle[] rec2 = new Rectangle[SIZE];
    @Override
    public void start(Stage primaryStage) {
        VBox root = new VBox(40);
        HBox top = new HBox(20);
        top.getChildren().addAll(new Label("Bubble Sort"), new Label("Merge Sort"));
        HBox middleH = new HBox(30);
        Pane middle1 = new Pane();
        int[] bArr = new int[SIZE];
        for (int i = 0; i < bArr.length; i++) {
            bArr[i] = (int)(Math.random() * SIZE);
        }
        for (int i = 0; i < rec1.length; i++) {
            rec1[i] = new Rectangle(4, bArr[i]);
            rec1[i].setLayoutX(i + 5);
            rec1[i].setLayoutY(SIZE - bArr[i]);
            middle1.getChildren().add(rec1[i]);
        }
        
        
        Pane middle2 = new Pane();
        int[] mArr = new int[SIZE];
        for (int i = 0; i < mArr.length; i++) {
            mArr[i] = (int)(Math.random() * SIZE);
        }
        for (int i = 0; i < rec2.length; i++) {
            rec2[i] = new Rectangle(3, mArr[i]);
            rec2[i].setLayoutX(i + 5);
            rec2[i].setLayoutY(SIZE - mArr[i]);
            middle2.getChildren().add(rec2[i]);
        }
        middleH.getChildren().addAll(middle1, middle2);
        root.getChildren().addAll(top, middleH);
        
        
        
        new Thread (() -> {
           // bubbleSort(bArr);
           int n = bArr.length;
        for (int i = 0; i < n-1; i++)
            for (int j = 0; j < n-i-1; j++) {
                try {
            Thread.sleep(10);
        } catch (InterruptedException ex) {
            Logger.getLogger(SortsSortsSorts.class.getName()).log(Level.SEVERE, null, ex);
        }
                if (bArr[j] > bArr[j+1])
                {
                    // swap temp and arr[i]
                    int temp = bArr[j];
                    int tempH = (int)rec1[j].getHeight();
                    bArr[j] = bArr[j+1];
                    rec1[j].setHeight(rec1[j + 1].getHeight());
                    rec1[j].setLayoutY(SIZE - bArr[j]);
                    bArr[j+1] = temp;
                    rec1[j + 1].setHeight(tempH);
                    rec1[j + 1].setLayoutY(SIZE - bArr[j + 1]);
                }
            }
        }).start();
        
        
        
        
        Scene scene = new Scene(root, 300, 250);
        primaryStage.setTitle("SortsSortsSorts");
        primaryStage.setScene(scene);
        primaryStage.show();
        
        primaryStage.setOnCloseRequest(e -> {
            System.exit(0);
            Platform.exit();
        });
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        launch(args);
    }
    
    
    
    public static void shakerSort(int[] array) {
        for (int i = 0; i < array.length/2; i++) {
            boolean swapped = false;
            for (int j = i; j < array.length - i - 1; j++) {
                if (array[j] < array[j+1]) {
                    int tmp = array[j];
                    array[j] = array[j+1];
                    array[j+1] = tmp;
                    swapped = true;
                }
            }
            for (int j = array.length - 2 - i; j > i; j--) {
                if (array[j] > array[j-1]) {
                    int tmp = array[j];
                    array[j] = array[j-1];
                    array[j-1] = tmp;
                    swapped = true;
                }
            }
            if(!swapped) break;
        }
    }
    
       // Merges two subarrays of arr[].
    // First subarray is arr[l..m]
    // Second subarray is arr[m+1..r]
    void merge(int arr[], int l, int m, int r) throws InterruptedException
    {
        // Find sizes of two subarrays to be merged
        int n1 = m - l + 1;
        int n2 = r - m;
 
        /* Create temp arrays */
        int L[] = new int [n1];
        int R[] = new int [n2];
 
        /*Copy data to temp arrays*/
        for (int i=0; i<n1; ++i)
            L[i] = arr[l + i];
        for (int j=0; j<n2; ++j)
            R[j] = arr[m + 1+ j];
 
 
        /* Merge the temp arrays */
 
        // Initial indexes of first and second subarrays
        int i = 0, j = 0;
 
        // Initial index of merged subarry array
        int k = l;
        while (i < n1 && j < n2)
        {
            Thread.sleep(200);
            if (L[i] <= R[j])
            {
                arr[k] = L[i];
                rec2[k].setHeight(L[i]);
                i++;
            }
            else
            {
                arr[k] = R[j];
                rec2[k].setHeight(R[j]);
                j++;
            }
            k++;
        }
 
        /* Copy remaining elements of L[] if any */
        while (i < n1)
        {
            Thread.sleep(200);
            arr[k] = L[i];
            rec2[k].setHeight(L[i]);
            i++;
            k++;
        }
 
        /* Copy remaining elements of R[] if any */
        while (j < n2)
        {
            Thread.sleep(200);
            arr[k] = R[j];
            rec2[k].setHeight(R[j]);
            j++;
            k++;
        }
    }
 
    // Main function that sorts arr[l..r] using
    // merge()
    void sort(int arr[], int l, int r) throws InterruptedException
    {
        if (l < r)
        {
            // Find the middle point
            int m = (l+r)/2;
 
            // Sort first and second halves
            sort(arr, l, m);
            sort(arr , m+1, r);
 
            // Merge the sorted halves
            merge(arr, l, m, r);
        }
    }
    
}
